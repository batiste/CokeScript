# CokeScript language by Batiste Bieler 2015
# Implemented using EPEG.JS, v0.0.8

epegjs = require("epegjs")
virtual = require("virtual-dom")
h = virtual.create

depth = 0
forLoopCount = 1
unpacking = 0
namespaces = [{}]
levelStack = [0]
prefix = '__'

def currentNs()
  return namespaces[namespaces.length - 1]

def currentNsHas(p)
  return namespaces[namespaces.length - 1].hasOwnProperty(p)

def newNs()
  namespaces.push({})
  return namespaces[namespaces.length - 1]

def resetGlobal()
  namespaces := [{}]
  forLoopCount := 1
  levelStack := [0]
  depth := 0
  unpacking := 0

# token are matched in order of declaration
# TODO: add functions

tokenDef = [
  {key: "string", func: stringDef},
  {key: "comment", func: commentDef},
  {key: "function_def", func: defDef, verbose: "function"},
  {key: "class", reg: /^class /},
  {key: "ret", reg: /^return/, verbose: "return"},
  {key: "if", reg: /^if /},
  {key: "or", reg: /^or /},
  {key: "and", reg: /^and /},
  {key: "while", reg: /^while /},
  {key: "instanceof", reg: /^instanceof /},
  {key: "try", reg: /^try/},
  {key: "catch", reg: /^catch/},
  {key: "throw", reg: /^throw /},
  {key: "pazz", reg: /^pass/, verbose: "pass"},
  {key: "new", reg: /^new /},
  {key: "tag", reg: /^<[a-zA-Z][0-9a-zA-Z]{0,29}/},
  {key: ">", reg: /^>/},
  {key: "elseif", reg: /^elseif /},
  {key: "else", reg: /^else/},
  {key: "for_loop", reg: /^for /, verbose: "for loop"},
  {key: "in", reg: /^in /},
  {key: "not", reg: /^not /, verbose: "not"},
  {key: "name", reg: /^[a-zA-Z_$]([0-9a-zA-Z_$\-]{0,28}[0-9a-zA-Z_$])?/},
  {key: "regexp", func: regExpDef, verbose: "regular expression"},
  {key: "math_operators", reg: /^(\+\+|\-\-)/, verbose: "math operator"},
  {key: "binary_operators", reg: /^(\&\&|\|\||\&|\||<<|\>\>)/, verbose: "binary operator"},
  {key: "comparison", reg: /^(<=|>=|<|>|!=|==)/},
  {key: "assign", reg: /^(\+=|-=|=|:=)/},
  {key: "number", reg: /^[-]?[0-9]+\.?[0-9]*/},
  {key: "comma", reg: /^\,/},
  {key: "dot", reg: /^\./},
  {key: "colon", reg: /^\:/, verbose: ":"},
  {key: "open_par", reg: /^\(/, verbose: "("},
  {key: "close_par", reg: /^\)/, verbose: ")"},
  {key: "open_bra", reg: /^\[/, verbose: "["},
  {key: "close_bra", reg: /^\]/, verbose: "]"},
  {key: "open_curly", reg: /^\{/, verbose: "{"},
  {key: "close_curly", reg: /^\}/, verbose: "}"},
  {key: "math", reg: /^[-|\+|\*|\/|%]/},
  {key: "samedent", func: dent("samedent"), verbose: "same indentation"},
  {key: "dedent", func: dent("dedent")},
  {key: "indent", func: dent("indent")},
  {key: "W", reg: /^[ ]/, verbose: "single whitespace"}
]

def startStr(input, stream)
  last = stream[stream.length - 1]
  if last and last.value == "\\"
    return
  if input.match(/^#{/)
    return "#{"

strInterpolationTokenDef = [
  {key: "start", func: startStr},
  {key: "end", reg: /^}/},
  {key: "name", reg: /^[a-zA-Z_$][0-9a-zA-Z_]{0,29}/},
  {key: "dot", reg: /^\./},
  {key: "char", reg: /^./}
]

strInterpolationGrammarDef = {
  START: {rules: ["EL* EOF"]},
  EL: {rules: ["VAR", "char", "name", "start", "end", "dot"]},
  VAR: {rules: ["start NAME end"]},
  NAME: {rules: ["name dot NAME", "name"]}
}

strGram = epegjs.compileGrammar(strInterpolationGrammarDef, strInterpolationTokenDef)

def generateStringCode(node, c)
  if node.type == 'VAR'
    return c + ' + ' + generateStringCode(node.children[1], c) + ' + ' + c
  
  if node.value != undefined
    return node.value
  
  str = ''
  if not node.children
    return ''

  for child in node.children
    str += generateStringCode(child, c)
  return str

def currentLevel()
  return levelStack[levelStack.length - 1]

def indentType(l)
  if l > currentLevel()
    return 'indent'

  if l < currentLevel()
    return 'dedent'

  if l == currentLevel()
    return 'samedent'

def dent(dentType)
  return def _dent(input)
    # empty line is a samedent
    m = input.match(/^\n[\s]*/)
    if m
      lines = m[0].split("\n")
      indent = lines[lines.length - 1].length
      if indentType(indent) == dentType
        if dentType == 'dedent'
          levelStack.pop()
          return ''
        
        if dentType == 'indent'
          levelStack.push(indent)
        
        return m[0]
    
def stringDef(input)
  first = input.charAt(0)
  if first == '"' or first == "'"
    i = 1
    while input.charAt(i)
      ch = input.charAt(i)
      if ch == '\\'
        i++
      elseif ch == first
        return input.slice(0, i + 1)
      i++

def regExpDef(input)
  if input.charAt(0) == '/'
    i = 1
    while input.charAt(i)
      ch = input.charAt(i)
      if ch == '\\'
        i++
      elseif ch == '/'
        i++
        # modifiers
        while input.charAt(i) and "igm".indexOf(input.charAt(i)) != -1
          i++
        return input.slice(0, i)
      i++

def defDef(input)
  if input.match(/^def[\(| |\n]/)
    return "def"
  
  if input.indexOf("dom ") == 0
    return "dom"

def commentDef(input)
  m = input.match(/^#/)
  if m
    i = m[0].length
    while input.charAt(i)
      ch = input.charAt(i)
      if ch == '\n'
        return input.slice(0, i)
      i++

def reflect(params) params

grammarDef = {
  START: {rules: ["LINE* EOF"]},
  ELC: {rules: ["W* comment"], verbose: "comment"},
  LINE: {rules: ["STATEMENT ELC? samedent+", "STATEMENT ELC? !dedent", 
     "ELC? samedent", "ELC !dedent"], verbose: "new line"},
  BLOCK: {rules: ["indent pazz dedent", "indent LINE+ dedent"]},
  STATEMENT: {rules: ["ASSIGN", "EXPR", "IF", "WHILE", "FOR", "RETURN", 
    "CLASS", "TAG", "DOM_ASSIGN", "TRY_CATCH", "THROW"]},
  CLASS_METHODS: {
      rules: ["samedent* f:FUNC_DEF samedent*"],
      hooks: def(p) p.f
  },
  CLASS: {
    rules: [
      "class n:name open_par p:name close_par indent m:CLASS_METHODS+ dedent",
      "class n:name indent m:CLASS_METHODS+ dedent"
    ],
    hooks: [
      def(p) {name: p.n, methods: p.m, parent: p.p},
      def(p) {name: p.n, methods: p.m}
    ]
  },
  FUNC_DEF_PARAMS: {rules: [
      "p1:FUNC_DEF_PARAMS comma W p2:FUNC_DEF_PARAMS",
      "p1:name assign e:EXPR",
      "p1:name"
    ],
    verbose: "def parameters"
  },
  LAMBDA_BODY: {rules: ["ASSIGN", "EXPR"]},
  LAMBDA: {rules: [
      "fd:function_def open_par params:FUNC_DEF_PARAMS? close_par W block:LAMBDA_BODY",
      "fd:function_def W fn:name open_par params:FUNC_DEF_PARAMS? close_par W block:LAMBDA_BODY",
      "fd:function_def W block:LAMBDA_BODY"
    ],
    hooks: reflect
  },
  FUNC_DEF: {rules: [
      "fd:function_def open_par params:FUNC_DEF_PARAMS? close_par block:BLOCK",
      "fd:function_def W fn:name open_par params:FUNC_DEF_PARAMS? close_par block:BLOCK",
      "fd:function_def W fn:name block:BLOCK",
      "fd:function_def block:BLOCK"
    ],
    hooks: reflect,
    verbose: "def definition"
  },
  ELSE_IF: {rules: ["samedent elseif e:EXPR b:BLOCK"], hooks: reflect},
  ELSE: {rules: ["samedent else b:BLOCK"], hooks: reflect},
  IF: {rules: ["if e:EXPR b:BLOCK elif:ELSE_IF* el:ELSE?"], hooks: reflect},
  ELSE_EXPR: {rules: ["W else W b:EXPR"], hooks: reflect},
  IF_EXPR: {rules: ["e:EXPR W if test:EXPR el:ELSE_EXPR?"], hooks: reflect},
  WHILE: {rules: ["while e:EXPR b:BLOCK"], hooks: reflect},
  MATH: {rules: ["e1:EXPR W op:math W e2:EXPR"]},
  PATH: {rules: ["PATH dot name", "PATH open_bra number close_bra", "name"]},
  ASSIGN: {rules: [
    "left:OBJECT W op:assign W right:EXPR",
    "left:EXPR W op:assign W right:EXPR",
    "left:STRICT_COMMA_SEPARATED_EXPR W op:assign W right:STRICT_COMMA_SEPARATED_EXPR",
    "left:STRICT_COMMA_SEPARATED_EXPR W op:assign W right:EXPR"
  ], hooks: reflect},
  W_OR_SAMEDENT: {rules: ["W", "samedent"], verbose: "samedent or whitespace"},
  W_SAMEDENT_INDENT: {rules: ["W", "samedent", "indent"], verbose: "indent or samedent or whitespace"},
  ANY_SPACE: {rules: ["W", "samedent", "indent", "dedent", "comment"], verbose: "any space"},
  FUNC_CALL_PARAMS: {rules: ["EXPR comma ANY_SPACE+ FUNC_CALL_PARAMS ANY_SPACE*", "EXPR ANY_SPACE*"]},
  FUNC_CALL: {rules: [
    "open_par FUNC_CALL_PARAMS? close_par"
  ]},

  TYPE: {rules: ["name colon"]},

  FOR: {rules: [
    "for_loop k:name comma W v:name W in a:EXPR b:BLOCK",
    "for_loop v:name W in a:EXPR b:BLOCK"],
    hooks: reflect
  },

  STRICT_COMMA_SEPARATED_EXPR: {rules: [
    "e1:EXPR comma W e2:STRICT_COMMA_SEPARATED_EXPR",
    "e1:EXPR comma W e2:EXPR"
  ],
  hooks: [
    def(p) [p.e1].concat(p.e2.children), def(p) [p.e1, p.e2]
  ] 
  },

  COMMA_SEPARATED_EXPR: {rules: [
    "EXPR comma ANY_SPACE+ COMMA_SEPARATED_EXPR ANY_SPACE*",
    "EXPR ANY_SPACE*"
  ]},

  ARRAY: {rules: [
    "open_bra ANY_SPACE* c:COMMA_SEPARATED_EXPR? ANY_SPACE* close_bra"
  ]},

  MEMBERS: {rules: [
    "name:name colon W value:EXPR same:samedent? comma any:ANY_SPACE+ m:MEMBERS space:ANY_SPACE*",
    "name:name colon W value:EXPR space:ANY_SPACE*"
  ],
  hooks: [
    def(p) [p].concat(p.m.children), def(p) [p]
  ]
  },

  OBJECT: {rules: [
    "open_curly indent? MEMBERS? close_curly"
  ]},

  TAG_PARAMS: {rules: [
      "left:TAG_PARAMS W right:TAG_PARAMS",
      "n:name assign e:EXPR",
      "n:name"
    ],
    hooks: reflect,
    verbose: "tag parameters"
  },

  TAG: {rules: [
    "tag:tag W? params:TAG_PARAMS? end:>? block:BLOCK?"
  ],
  hooks: reflect
  },

  DOM_ASSIGN: {rules: [
    "assign EXPR"
  ]},

  TRY_CATCH: {rules: [
      "try b1:BLOCK samedent? catch open_par err:name? close_par b2:BLOCK"
    ],
    hooks: reflect
  },

  THROW: {rules: [
    "throw EXPR"
  ]},

  RETURN: {rules: ["ret W STRICT_COMMA_SEPARATED_EXPR", "ret W EXPR", "ret"]},
  RIGHT_EXPR: {rules: [
    "math_operators",
    "W binary_operators W EXPR",
    "W or EXPR",
    "W and EXPR",
    "W comparison W EXPR",
    "W > W EXPR",
    "dot EXPR",
    "W instanceof EXPR",
    "open_bra EXPR close_bra",
    "FUNC_CALL"
    ],
    verbose: "expression"
  },

  EXPR: {rules: [
    "IF_EXPR",
    "MATH",
    "OBJECT",
    "FUNC_DEF",
    "EXPR RIGHT_EXPR",
    "name",
    "number",
    "LAMBDA",
    "string",
    "regexp",
    "open_par EXPR close_par",
    "new EXPR",
    "not EXPR",
    "ARRAY"
    ],
    verbose: "expression"
  }
}

def spacer(n)
  out = ""
  i = 0
  while i < n
    out += " "
    i++
  return out

def sp(mod)
  if mod
    return spacer(2 * (depth + mod))
  return spacer(2 * depth)

nc = 1

# children name
def CN()
  return prefix + 'c' + nc

def pushCN()
  nc++
  return prefix + 'c' + nc

def popCN()
  nc--
  return prefix + 'c' + nc

def generateHoistedVar()
  ns = currentNs()
  hoisted = []
  for key, value in ns
    if value == 'hoist'
      hoisted.push(key)
  if hoisted.length
    return 'var ' + hoisted.join(', ') + ';'
  return ''

def hoistVar(name)
  ns = currentNs()
  ns[name] = 'hoist'

backend = {
  START: def(node)
    str = ''
    for child in node.children
      str += generateCode(child)
    hoisted = generateHoistedVar()
    if hoisted
      return generateHoistedVar() + '\n' + str
    return str
  ,
  dedent: def(node)
    depth := Math.max(0, depth - 1)
    return ''
  ,
  indent: def(node)
    depth := depth + 1
    return '\n' + sp()
  ,
  samedent: def(node)
    l = node.value.split('\n').length - 1
    i = 0
    str = ''
    while i < l
      str += '\n' + sp()
      i++
    return str
  ,
  DOM_ASSIGN: def(node)
    name = CN()
    varname = generateCode(node.children[1])
    hoistVar(CN())
    hoistVar('#{prefix}tmp')
    str = '#{prefix}tmp = #{varname}; #{prefix}tmp instanceof Array ? (#{name} = #{name}.concat(#{prefix}tmp)) : #{name}.push(String(#{prefix}tmp))'
    return str
  ,
  TAG_PARAMS: def(node)
    if node.children.left
      return generateCode(node.children.left) + ', ' + generateCode(node.children.right)
    
    name = node.children.n.value

    if node.children.e
      return '"' + name + '": ' + generateCode(node.children.e)
    else
      return '"' + name + '": true'
  ,
  TAG: def(node)
    str = ''
    params = "{"
    name = node.children.tag.value.substring(1)
    if node.children.params
      params += generateCode(node.children.params)

    params += '}'
    sub = '[]'
    ns = currentNs()

    if node.children.block
      sub = pushCN()
      str += CN() + ' = [];'
      hoistVar(CN())
      str += generateCode(node.children.block)
      popCN()

    str += '\n' + sp() + CN() + '.push(cokescript.h("#{name}", #{params}, #{sub}))'
    return str
  ,
  CLASS: def(node)
    name = node.children.name.value
    funcs = node.children.methods
    parent = node.children.parent
    str = ''
    constructor = null
    for func in funcs
      func_def = func.children
      func_name = func_def.children.fn.value
      if func_name == 'constructor'
        constructor = func_def
      else
        str += '\n' + sp() + name + '.prototype.#{func_name} = ' + generateCode(func_def)

    hoistVar(name)
    ns = newNs()

    params = constructor and constructor.children.params
    if params
      params = generateCode(params)
    else
      params = ''
    
    body = constructor and constructor.children.block
    cons_str = '#{name} = function #{name} ( #{params} ) {'
    cons_str += '\n' + sp(1) + 'if(!(this instanceof #{name})){ return new #{name}(' + Object.keys(ns).join(',') + ')}'
    for key, value in ns
      if value != true and value != undefined
        cons_str += '\n' + sp(1) + 'if(#{key} === undefined) {#{key} = ' + generateCode(value) + '}'
    if body
      cons_str += generateCode(body)
    cons_str += sp() + '\n}'

    if parent
      cons_str += '\n' + sp() + '#{name}.prototype = Object.create(#{parent.value}.prototype)'
      cons_str += '\n' + sp() + '#{name}.prototype.constructor = #{name}'

    namespaces.pop()
    return cons_str + str
  ,
  LAMBDA: def(node)
    name = ""
    ns = newNs()
    if node.children.fn
      name = node.children.fn.value
      ns[name] = true
    
    str = "function " + name + "("
    if node.children.params
      str += generateCode(node.children.params, ns)
    
    str += ') {'
    for key, value in ns
      if value != true and value != undefined
        code = generateCode(value)
        str += '\n' + sp(1) + 'if(#{key} === undefined) {#{key} = #{code}}'
      
    if node.children.block
      str += ' return ' + generateCode(node.children.block, ns)
    
    namespaces.pop()
    return str + "; }"
  ,
  FUNC_DEF: def(node)
    name = ""
    ns = currentNs()
    is_dom = node.children.fd.value == 'dom'
    if node.children.fn
      name = node.children.fn.value
      ns[name] = true
    
    ns = newNs()
    str = "function " + name + "("
    if node.children.params
      str += generateCode(node.children.params)

    str += ') {'
    for key, value in ns
      if value != true and value != undefined
        code = generateCode(value)
        str += '\n' + sp(1) + 'if(#{key} === undefined) {#{key} = #{code};}'

    body = ''
    if node.children.block
      body = generateCode(node.children.block)
    
    if is_dom
      str += '\n' + sp(1) + 'var ' + CN() + ' = [];'

    hoisted = generateHoistedVar()
    if hoisted
      str += '\n' + sp(1) + hoisted

    str += body

    namespaces.pop()

    if is_dom
      str += '\n' + sp(1) + 'return ' + CN() + ';'
    
    return str + '\n' + sp() + '}'
  ,
  FUNC_DEF_PARAMS: def(node)
    str = ""
    ns = currentNs()
    if node.children[0].type == 'name'
      ns[node.children[0].value] = true
      if node.children[1] and node.children[1].type == 'assign'
        ns[node.children[0].value] = node.children[2]

    for n in node.children
      if n.type == 'name' or n.type == 'FUNC_DEF_PARAMS' or n.type == 'comma' or n.type == 'window'
        str += generateCode(n)

    return str
  ,
  ASSIGN: def(node)
    str = ""
    op = node.children.op.value
    explicit_global = op == ':='
    if explicit_global
      op = '='
    
    ns = currentNs()
    left = node.children.left
    right_code = generateCode(node.children.right)

    # assignement unpacking
    if left.type == 'STRICT_COMMA_SEPARATED_EXPR'
      unpacking++
      unpack_name = '#{prefix}unpack#{unpacking}'
      str += 'var #{unpack_name} = #{right_code};\n' + sp()
      i = 0
      for child in left.children
        n = child.children[0]
        if n.type == 'name' and child.children.length == 1
          hoistVar(n.value)
        str += generateCode(child) + ' #{op} #{unpack_name}[#{i}]'
        if i < left.children.length - 1
          str += ';\n' + sp()
        i++
      return str

    # assignement mapping
    if left.type == 'OBJECT'
      unpacking++
      unpack_name = '#{prefix}unpack#{unpacking}'
      str += 'var #{unpack_name} = #{right_code};\n' + sp()
      i = 0
      members = left.children[1].children
      for member in members
        name = generateCode(member.name)
        value = generateCode(member.value)
        if member.samedent
          generateCode(member.samedent)
        if member.any
          for s in member.any
            generateCode(s)
        if member.space
          for s in member.space
            generateCode(s)
        str += "#{value}.#{name} = #{unpack_name}.#{name}"
        if i < members.length - 1
          str += ';\n' + sp()
        i++
      return str


    if left.children[0].type == 'name'
      ch = left.children[0]
      if not currentNsHas(ch.value)
        if not explicit_global
          hoistVar(ch.value)
    
    return generateCode(node.children.left) + ' ' + op + ' ' + right_code
  ,
  STATEMENT: def(node)
    str = ''
    for child in node.children
      e = child.children and child.children[0]
      # TODO: this should be possible
      t = child.type
      str += generateCode(child)
      other = e and (e.type == 'FUNC_DEF' or e.type == 'LAMBDA')
      if t == 'FOR' or t == 'TRY_CATCH' or t == 'WHILE' or t == 'IF' or t == 'STATEMENT' or t == 'samedent' or other
        pass
      else
        str += ';'

    return str
  ,
  IF: def(node)
    str = ''
    str = 'if(' + generateCode(node.children.e) + ') {' + generateCode(node.children.b) + '\n' + sp() + '}'
    elif = node.children.elif
    if elif
      if Array.isArray(elif)
        for value in elif
          str += generateCode(value)
      else
        str += generateCode(elif)

    if node.children.el
      str += generateCode(node.children.el)
    
    return str
  ,
  IF_EXPR: def(node)
    str = ''
    str = generateCode(node.children.test) + ' ? ' + generateCode(node.children.e) + ' : '
    if node.children.el
      str += generateCode(node.children.el)
    else
      str += 'undefined'
    
    return str
  ,
  ELSE_EXPR: def(node)
    return generateCode(node.children.b)
  ,
  WHILE: def(node)
    return 'while(' + generateCode(node.children.e) + '){' + generateCode(node.children.b) + '\n' + sp() + '}'
  ,
  FOR: def(node)
    keyIndexName = prefix + "index" + forLoopCount
    keyArrayName = prefix + "keys" + forLoopCount
    hoistVar(keyIndexName)
    hoistVar(keyArrayName)

    arrayName = generateCode(node.children.a)
    varName = node.children.v.value
    forLoopCount++
    indexName = false
    if node.children.k
      indexName = node.children.k.value

    if indexName
      hoistVar(indexName)
    hoistVar(varName)

    str = '#{keyArrayName} = Object.keys(#{arrayName});\n'
    str += sp() + 'for(#{keyIndexName} = 0; #{keyIndexName} < #{keyArrayName}.length; #{keyIndexName}++) {\n'
    if indexName
      str += sp(1) + '#{indexName} = #{keyArrayName}[#{keyIndexName}];\n'
    
    str += sp(1) + '#{varName} = #{arrayName}[#{keyArrayName}[#{keyIndexName}]];'
    str += generateCode(node.children.b) + '\n' + sp() + '}'
    return str
  ,
  ELSE_IF: def(node)
    return ' else if(' + generateCode(node.children.e) + ') {' + generateCode(node.children.b) + '\n' + sp() + '}'
  ,
  ELSE: def(node)
    return ' else {' + generateCode(node.children.b) + '\n' + sp() + '}'
  ,
  TRY_CATCH: def(node)
    str = "try {"
    str += generateCode(node.children.b1)
    str += '\n' + sp() + "} catch(" + generateCode(node.children.err) + ") {"
    str += generateCode(node.children.b2)
    return str + '\n' + sp() + "}"
  ,
  STRICT_COMMA_SEPARATED_EXPR: def(node)
    elements = []
    for child in node.children
      elements.push(generateCode(child))
    return '[' + elements.join(", ") + ']'
  ,
  MEMBERS: def(node)
    str = ""
    i = 0
    for member in node.children
      str += generateCode(member.name) + ': ' + generateCode(member.value)
      if i < node.children.length - 1
        str += ', '
      if member.same
        str += generateCode(member.same)
      if member.any
        for s in member.any
          generateCode(s)
      if member.space
        for s in member.space
          str += generateCode(s)
      i++
    return str
  ,
  string: def(node)
    v = node.value
    v = v.replace(/\n/g, "\\n")
    ast = strGram.parse(v)
    if not ast.complete
      throw new Error(ast.hint)
    return generateStringCode(ast, v.charAt(0))
  ,
  comment: def(node)
    return node.value.replace(/^#/g, "//")
  ,
  name: def(node)
    return node.value.replace('-', '_')
  ,
  pazz: def(node)
    return ''
  ,
  not: def(node)
    return '!'
  ,
  and: def(node)
    return '&& '
  ,
  or: def(node)
    return '|| '
  ,
  comparison: def(node)
    if node.value == '=='
      return '==='
    
    if node.value == '!='
      return '!=='
    
    return node.value
}

def generateCode(node)
  if not node
    # debugger
  if backend[node.type]
    return backend[node.type](node)
  
  if node.value != undefined
    return node.value
  
  str = ""
  if not node.children
    return ''
  
  for child in node.children
    str += generateCode(child)
  
  return str


def generateExports(keys)
  str = '\nmodule.exports = {'
  keys = keys or Object.keys(currentNs())
  for key in keys
    str += '\n  #{key} : #{key},'
  return str + '\n}'

def generateModule(input, opts)
  resetGlobal()
  ast = gram.parse(input + "\n")
  if not ast.complete
    throw new Error(ast.hint)
  
  obj = {ast: ast, code: generateCode(ast), ns: currentNs()}
  return obj


gram = epegjs.compileGrammar(grammarDef, tokenDef)

def createVNode(name, attrs, children)
  # this could be done at compile time
  if attrs.constructor == Array
    return virtual.h(name, attrs, children)
  props = {}
  attributes = {}
  for key, value in attrs
    if key.match(/^(checked|value|selected)$/)
      props[key] = value
    else
      attributes[key] = value
  props.attributes = attributes
  return virtual.h(name, props, children)

module.exports = {
  v: virtual,
  h: createVNode,
  create: virtual.create,
  diff: virtual.diff,
  patch: virtual.patch,
  grammar: gram,
  strGrammar: strGram,
  grammarDef: grammarDef,
  epegjs: epegjs,
  tokenDef: tokenDef,
  generateModule: generateModule,
  generateCode: generateCode,
  generateExports: generateExports
}
